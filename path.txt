    snowflake://AmbikaS:Snowflake#2025@ZBBAZCF-TR85829/raw/test?warehouse=COMPUTE_WH&role=ACCOUNTADMIN
duckdb:///C:/Users/ambik/ambik_backup/streamlit_duckdb/employee.duckdb
postgresql://postgres:postgres@localhost:5432/postgres
    sqlite:///C:/Users/ambik/ambik_backup/streamlit_duckdb/example.db
csv
json

SELECT * FROM customer d left join customer  e on d.C_CUSTOMER_SK = e.C_CUSTOMER_SK limit 100
SELECT * FROM customer limit 100

--
select * from employee
SELECT * FROM employee2 LIMIT 10


-- data type (snowflake)
SELECT 
    TABLE_NAME,
    COLUMN_NAME,
    DATA_TYPE
FROM 
    INFORMATION_SCHEMA.COLUMNS
WHERE 
    TABLE_NAME IN ('EMPLOYEE', 'EMPLOYEE2')
ORDER BY 
    TABLE_NAME, ORDINAL_POSITION;

-- postgres query
SELECT 
    table_name,
    column_name,
    data_type
FROM 
    information_schema.columns
WHERE 
    table_name = 'employee'  -- lowercase unless the table was created with quotes
    AND table_schema = 'public'  -- adjust schema if needed
ORDER BY 
    table_name, ordinal_position;


-- duckdb
SELECT 
    table_name,
    column_name,
    data_type
FROM 
    information_schema.columns
WHERE 
    table_name IN ('radar')
ORDER BY 
    table_name, ordinal_position;




-- join query (from duckdb table to csv and loaded into snowflake table)

SELECT 
    de.id,
    de.name,
    de.dept_id
FROM 
    duck_employee de
JOIN 
    employee t
ON 
    de.id = t.id
WHERE 
    de.name = t.name AND de.dept_id = t.dept_id;

SELECT 
    de.id,
    de.name,
    de.dept_id
FROM 
    employee de
 JOIN 
    employee t
ON 
    de.id!= t.id
WHERE 
    de.name = t.name AND de.dept_id!= t.dept_id;





--agregation (working())
SELECT 
  MAX(dept_id) AS dept_id,
  NULL AS id,
  NULL AS name
FROM employee

-- ids in target an dnot in sourceSELECT id (provided in)
select * FROM employee_copy
WHERE id NOT IN (SELECT id FROM employee);

--Find mismatched rows with same ID
SELECT s.id, s.name AS source_name, t.name AS target_name, 
       s.dept_id AS source_dept, t.dept_id AS target_dept
FROM employee s
JOIN employee t ON s.id != t.id
WHERE s.name = t.name OR s.dept_id = t.dept_id; (working())


--Validate Primary Key Uniqueness (working())
SELECT name, COUNT(*) 
FROM employee
GROUP BY name
HAVING COUNT(*) > 1;


--Aggregate Comparison (optional) (working())
Check aggregates like totals, max, min:
SELECT
  MAX(id) AS max_id,
  MIN(id) AS min_id,
  COUNT(DISTINCT dept_id) AS unique_departments
FROM employee;


-- MINUS (Compare distinct values in a column)
SELECT dept_id
FROM employee
MINUS
SELECT dept_id
FROM employee_copy; -- not working

SELECT dept_id
FROM employee_COPY
MINUS
SELECT dept_id
FROM employee;

-- Column-wise summary stats for numeric fields (working)
SELECT
  COUNT(*) AS row_count,
  COUNT(DISTINCT id) AS unique_ids,
  SUM(id) AS id_sum,
  AVG(id) AS id_avg
FROM employee;

SELECT
  COUNT(*) AS row_count,
  COUNT(DISTINCT id) AS unique_ids,
  SUM(id) AS id_sum,
  AVG(id) AS id_avg
FROM employee_copy;


